{
  "openapi": "3.0.3",
  "info": {
    "title": "Oxide Switch Dataplane Controller",
    "description": "API for managing the Oxide rack switch",
    "contact": {
      "url": "https://oxide.computer",
      "email": "api@oxide.computer"
    },
    "version": "0.1.0"
  },
  "paths": {
    "/all-settings": {
      "delete": {
        "summary": "Clear all settings.",
        "description": "This removes all data entirely.",
        "operationId": "reset_all",
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/all-settings/{tag}": {
      "delete": {
        "summary": "Clear all settings associated with a specific tag.",
        "description": "This removes:\n\n- All ARP or NDP table entries. - All routes - All links on all switch ports",
        "operationId": "reset_all_tagged",
        "parameters": [
          {
            "in": "path",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/arp": {
      "get": {
        "summary": "Fetch the configured IPv4 ARP table entries.",
        "operationId": "arp_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArpEntryResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "post": {
        "summary": "Add an IPv4 ARP table entry, mapping an IPv4 address to a MAC address.",
        "operationId": "arp_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArpEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Remove all entries in the IPv4 ARP tables.",
        "operationId": "arp_reset",
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/arp/{ip}": {
      "get": {
        "summary": "Get a single IPv4 ARP table entry, by its IPv4 address.",
        "operationId": "arp_get",
        "parameters": [
          {
            "in": "path",
            "name": "ip",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ipv4"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArpEntry"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Remove a single IPv4 ARP entry, by its IPv4 address.",
        "operationId": "arp_delete",
        "parameters": [
          {
            "in": "path",
            "name": "ip",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ipv4"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/backplane-map": {
      "get": {
        "summary": "Return the full backplane map.",
        "description": "This returns the entire mapping of all cubbies in a rack, through the cabled backplane, and into the Sidecar main board. It also includes the Tofino \"connector\", which is included in some contexts such as reporting counters.",
        "operationId": "backplane_map",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Map_of_BackplaneLink",
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/BackplaneLink"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/backplane-map/{port_id}": {
      "get": {
        "summary": "Return the backplane mapping for a single switch port.",
        "operationId": "port_backplane_link",
        "parameters": [
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackplaneLink"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/build-info": {
      "get": {
        "summary": "Return detailed build information about the `dpd` server itself.",
        "operationId": "build_info",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildInfo"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/channels": {
      "get": {
        "summary": "Get the set of available channels for all ports.",
        "description": "This returns the unused MAC channels for each physical switch port. This can be used to determine how many additional links can be crated on a physical switch port.",
        "operationId": "channels_list",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_FreeChannels",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FreeChannels"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/counters/fec": {
      "get": {
        "summary": "Get the FEC RS counters for all links.",
        "operationId": "fec_rs_counters_list",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_LinkFecRSCounters",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkFecRSCounters"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/counters/fec/{port_id}/{link_id}": {
      "get": {
        "summary": "Get the FEC RS counters for the given link.",
        "operationId": "fec_rs_counters_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkFecRSCounters"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/counters/fsm/{port_id}/{link_id}": {
      "get": {
        "summary": "Get the autonegotiation FSM counters for the given link.",
        "operationId": "link_fsm_counters_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkFsmCounters"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/counters/linkup": {
      "get": {
        "summary": "Get the LinkUp counters for all links.",
        "operationId": "link_up_counters_list",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_LinkUpCounter",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkUpCounter"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/counters/linkup/{port_id}/{link_id}": {
      "get": {
        "summary": "Get the LinkUp counters for the given link.",
        "operationId": "link_up_counters_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkUpCounter"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/counters/p4": {
      "get": {
        "summary": "Get a list of all the available p4-defined counters.",
        "operationId": "counter_list",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_String",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/counters/p4/{counter}": {
      "get": {
        "summary": "Get the values for a given counter.",
        "description": "The name of the counter should match one of those returned by the `counter_list()` call.",
        "operationId": "counter_get",
        "parameters": [
          {
            "in": "query",
            "name": "force_sync",
            "description": "Force a sync of the counters from the ASIC to memory, even if the default refresh timeout hasn't been reached.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "counter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_TableCounterEntry",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TableCounterEntry"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/counters/p4/{counter}/reset": {
      "post": {
        "summary": "Reset a single p4-defined counter.",
        "description": "The name of the counter should match one of those returned by the `counter_list()` call.",
        "operationId": "counter_reset",
        "parameters": [
          {
            "in": "path",
            "name": "counter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/counters/pcs": {
      "get": {
        "summary": "Get the physical coding sublayer (PCS) counters for all links.",
        "operationId": "pcs_counters_list",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_LinkPcsCounters",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkPcsCounters"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/counters/pcs/{port_id}/{link_id}": {
      "get": {
        "summary": "Get the Physical Coding Sublayer (PCS) counters for the given link.",
        "operationId": "pcs_counters_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkPcsCounters"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/counters/rmon/{port_id}/{link_id}/all": {
      "get": {
        "summary": "Get the full set of traffic counters for the given link.",
        "operationId": "rmon_counters_get_all",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkRMonCountersAll"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/counters/rmon/{port_id}/{link_id}/subset": {
      "get": {
        "summary": "Get the most relevant subset of traffic counters for the given link.",
        "operationId": "rmon_counters_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkRMonCounters"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/dpd-uptime": {
      "get": {
        "summary": "Return the server uptime.",
        "operationId": "dpd_uptime",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "int64",
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/dpd-version": {
      "get": {
        "summary": "Return the version of the `dpd` server itself.",
        "operationId": "dpd_version",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/leds": {
      "get": {
        "summary": "Return the state of all attention LEDs on the Sidecar QSFP ports.",
        "operationId": "leds_list",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Map_of_Led",
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/Led"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/links": {
      "get": {
        "summary": "List all links, on all switch ports.",
        "operationId": "link_list_all",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "description": "Filter links to those whose name contains the provided string.\n\nIf not provided, then all links are returned.",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_Link",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/links/tfport_data": {
      "get": {
        "summary": "Collect the link data consumed by `tfportd`.  This app-specific convenience",
        "description": "routine is meant to reduce the time and traffic expended on this once-per-second operation, by consolidating multiple per-link requests into a single per-switch request.",
        "operationId": "tfport_data",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_TfportData",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TfportData"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/loopback/ipv4": {
      "get": {
        "summary": "Get loopback IPv4 addresses.",
        "operationId": "loopback_ipv4_list",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_Ipv4Entry",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ipv4Entry"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Add a loopback IPv4.",
        "operationId": "loopback_ipv4_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Ipv4Entry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/loopback/ipv4/{ipv4}": {
      "delete": {
        "summary": "Remove one loopback IPv4 address.",
        "operationId": "loopback_ipv4_delete",
        "parameters": [
          {
            "in": "path",
            "name": "ipv4",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ipv4"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/loopback/ipv6": {
      "get": {
        "summary": "Get loopback IPv6 addresses.",
        "operationId": "loopback_ipv6_list",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_Ipv6Entry",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ipv6Entry"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Add a loopback IPv6.",
        "operationId": "loopback_ipv6_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Ipv6Entry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/loopback/ipv6/{ipv6}": {
      "delete": {
        "summary": "Remove one loopback IPv6 address.",
        "operationId": "loopback_ipv6_delete",
        "parameters": [
          {
            "in": "path",
            "name": "ipv6",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ipv6"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/nat/ipv4": {
      "get": {
        "summary": "Get all of the external addresses in use for IPv4 NAT mappings.",
        "operationId": "nat_ipv4_addresses_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ipv4ResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "delete": {
        "summary": "Clear all IPv4 NAT mappings.",
        "operationId": "nat_ipv4_reset",
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/nat/ipv4/{ipv4}": {
      "get": {
        "summary": "Get all of the external->internal NAT mappings for a given IPv4 address.",
        "operationId": "nat_ipv4_list",
        "parameters": [
          {
            "in": "path",
            "name": "ipv4",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ipv4"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ipv4NatResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/nat/ipv4/{ipv4}/{low}": {
      "get": {
        "summary": "Get the external->internal NAT mapping for the given address/port",
        "operationId": "nat_ipv4_get",
        "parameters": [
          {
            "in": "path",
            "name": "ipv4",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ipv4"
            }
          },
          {
            "in": "path",
            "name": "low",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NatTarget"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Clear the NAT mappings for an IPv4 address and starting L3 port.",
        "operationId": "nat_ipv4_delete",
        "parameters": [
          {
            "in": "path",
            "name": "ipv4",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ipv4"
            }
          },
          {
            "in": "path",
            "name": "low",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/nat/ipv4/{ipv4}/{low}/{high}": {
      "put": {
        "summary": "Add an external->internal NAT mapping for the given address/port range",
        "description": "This maps an external IPv6 address and L3 port range to:  - A gimlet's IPv6 address  - A gimlet's MAC address  - A Geneve VNI\n\nThese identify the gimlet on which a guest is running, and gives OPTE the information it needs to  identify the guest VM that uses the external IPv6 and port range when making connections outside of an Oxide rack.",
        "operationId": "nat_ipv4_create",
        "parameters": [
          {
            "in": "path",
            "name": "high",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "ipv4",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ipv4"
            }
          },
          {
            "in": "path",
            "name": "low",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NatTarget"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/nat/ipv6": {
      "get": {
        "summary": "Get all of the external addresses in use for NAT mappings.",
        "operationId": "nat_ipv6_addresses_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ipv6ResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "delete": {
        "summary": "Clear all IPv6 NAT mappings.",
        "operationId": "nat_ipv6_reset",
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/nat/ipv6/{ipv6}": {
      "get": {
        "summary": "Get all of the external->internal NAT mappings for a given address.",
        "operationId": "nat_ipv6_list",
        "parameters": [
          {
            "in": "path",
            "name": "ipv6",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ipv6"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ipv6NatResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/nat/ipv6/{ipv6}/{low}": {
      "get": {
        "summary": "Get the external->internal NAT mapping for the given address and starting L3",
        "description": "port.",
        "operationId": "nat_ipv6_get",
        "parameters": [
          {
            "in": "path",
            "name": "ipv6",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ipv6"
            }
          },
          {
            "in": "path",
            "name": "low",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NatTarget"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Delete the NAT mapping for an IPv6 address and starting L3 port.",
        "operationId": "nat_ipv6_delete",
        "parameters": [
          {
            "in": "path",
            "name": "ipv6",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ipv6"
            }
          },
          {
            "in": "path",
            "name": "low",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/nat/ipv6/{ipv6}/{low}/{high}": {
      "put": {
        "summary": "Add an external->internal NAT mapping for the given address and L3 port",
        "description": "range.\n\nThis maps an external IPv6 address and L3 port range to:  - A gimlet's IPv6 address  - A gimlet's MAC address  - A Geneve VNI\n\nThese identify the gimlet on which a guest is running, and gives OPTE the information it needs to  identify the guest VM that uses the external IPv6 and port range when making connections outside of an Oxide rack.",
        "operationId": "nat_ipv6_create",
        "parameters": [
          {
            "in": "path",
            "name": "high",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "ipv6",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ipv6"
            }
          },
          {
            "in": "path",
            "name": "low",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NatTarget"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ndp": {
      "get": {
        "summary": "Fetch the IPv6 NDP table entries.",
        "description": "This returns a paginated list of all IPv6 neighbors directly connected to the switch.",
        "operationId": "ndp_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArpEntryResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "post": {
        "summary": "Add an IPv6 NDP entry, mapping an IPv6 address to a MAC address.",
        "operationId": "ndp_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArpEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Remove all entries in the the IPv6 NDP tables.",
        "operationId": "ndp_reset",
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ndp/{ip}": {
      "get": {
        "summary": "Get a single IPv6 NDP table entry, by its IPv6 address.",
        "operationId": "ndp_get",
        "parameters": [
          {
            "in": "path",
            "name": "ip",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ipv6"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArpEntry"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Remove an IPv6 NDP entry, by its IPv6 address.",
        "operationId": "ndp_delete",
        "parameters": [
          {
            "in": "path",
            "name": "ip",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ipv6"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/port/{port_id}/settings": {
      "get": {
        "summary": "Get port settings atomically.",
        "operationId": "port_settings_get",
        "parameters": [
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          },
          {
            "in": "query",
            "name": "tag",
            "description": "Restrict operations on this port to the provided tag.",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortSettings"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Apply port settings atomically.",
        "description": "These settings will be applied holistically, and to the extent possible atomically to a given port. In the event of a failure a rollback is attempted. If the rollback fails there will be inconsistent state. This failure mode returns the error code \"rollback failure\". For more details see the docs on the [`PortSettings`] type.",
        "operationId": "port_settings_apply",
        "parameters": [
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          },
          {
            "in": "query",
            "name": "tag",
            "description": "Restrict operations on this port to the provided tag.",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortSettings"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Clear port settings atomically.",
        "operationId": "port_settings_clear",
        "parameters": [
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          },
          {
            "in": "query",
            "name": "tag",
            "description": "Restrict operations on this port to the provided tag.",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortSettings"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports": {
      "get": {
        "summary": "List all switch ports on the system.",
        "operationId": "port_list",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_PortId",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortId"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}": {
      "get": {
        "summary": "Return information about a single switch port.",
        "operationId": "port_get",
        "parameters": [
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwitchPort"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/led": {
      "get": {
        "summary": "Return the current state of the attention LED on a front-facing QSFP port.",
        "operationId": "led_get",
        "parameters": [
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Led"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "summary": "Override the current state of the attention LED on a front-facing QSFP port.",
        "description": "The attention LED normally follows the state of the port itself. For example, if a transceiver is powered and operating normally, then the LED is solid on. An unexpected power fault would then be reflected by powering off the LED.\n\nThe client may override this behavior, explicitly setting the LED to a specified state. This can be undone, sending the LED back to its default policy, with the endpoint `/ports/{port_id}/led/auto`.",
        "operationId": "led_set",
        "parameters": [
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LedState"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/led/auto": {
      "put": {
        "summary": "Set the LED policy to automatic.",
        "description": "The automatic LED policy ensures that the state of the LED follows the state of the switch port itself.",
        "operationId": "led_set_auto",
        "parameters": [
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links": {
      "get": {
        "summary": "List the links within a single switch port.",
        "operationId": "link_list",
        "parameters": [
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_Link",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create a link on a switch port.",
        "description": "Create an interface that can be used for sending Ethernet frames on the provided switch port. This will use the first available lanes in the physical port to create an interface of the desired speed, if possible.",
        "operationId": "link_create",
        "parameters": [
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkId"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}": {
      "get": {
        "summary": "Get an existing link by ID.",
        "operationId": "link_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Delete a link from a switch port.",
        "operationId": "link_delete",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/autoneg": {
      "get": {
        "summary": "Return whether the link is configured to use autonegotiation with its peer",
        "description": "link.",
        "operationId": "link_autoneg_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "summary": "Set whether a port is configured to use autonegotation with its peer link.",
        "operationId": "link_autoneg_set",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Boolean",
                "type": "boolean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/enabled": {
      "get": {
        "summary": "Return whether the link is enabled.",
        "operationId": "link_enabled_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "summary": "Enable or disable a link.",
        "operationId": "link_enabled_set",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Boolean",
                "type": "boolean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/fault": {
      "get": {
        "summary": "Return any fault currently set on this link",
        "operationId": "link_fault_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaultCondition"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Inject a fault on this link",
        "operationId": "link_fault_inject",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "String",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Clear any fault currently set on this link",
        "operationId": "link_fault_clear",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/history": {
      "get": {
        "summary": "Get the event history for the given link.",
        "operationId": "link_history_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkHistory"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/ipv4": {
      "get": {
        "summary": "List the IPv4 addresses associated with a link.",
        "operationId": "link_ipv4_list",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ipv4EntryResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "post": {
        "summary": "Add an IPv4 address to a link.",
        "operationId": "link_ipv4_create",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Ipv4Entry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Clear all IPv4 addresses from a link.",
        "operationId": "link_ipv4_reset",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/ipv4/{address}": {
      "delete": {
        "summary": "Remove an IPv4 address from a link.",
        "operationId": "link_ipv4_delete",
        "parameters": [
          {
            "in": "path",
            "name": "address",
            "description": "The IPv4 address on which to operate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ipv4"
            }
          },
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/ipv6": {
      "get": {
        "summary": "List the IPv6 addresses associated with a link.",
        "operationId": "link_ipv6_list",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ipv6EntryResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "post": {
        "summary": "Add an IPv6 address to a link.",
        "operationId": "link_ipv6_create",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Ipv6Entry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Clear all IPv6 addresses from a link.",
        "operationId": "link_ipv6_reset",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/ipv6/{address}": {
      "delete": {
        "summary": "Remove an IPv6 address from a link.",
        "operationId": "link_ipv6_delete",
        "parameters": [
          {
            "in": "path",
            "name": "address",
            "description": "The IPv6 address on which to operate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ipv6"
            }
          },
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/ipv6_enabled": {
      "get": {
        "summary": "Return whether the link is configured to act as an IPv6 endpoint",
        "operationId": "link_ipv6_enabled_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "summary": "Set whether a port is configured to act as an IPv6 endpoint",
        "operationId": "link_ipv6_enabled_set",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Boolean",
                "type": "boolean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/kr": {
      "get": {
        "summary": "Return whether the link is in KR mode.",
        "description": "\"KR\" refers to the Ethernet standard for the link, which are defined in various clauses of the IEEE 802.3 specification. \"K\" is used to denote a link over an electrical cabled backplane, and \"R\" refers to \"scrambled encoding\", a 64B/66B bit-encoding scheme.\n\nThus this should be true iff a link is on the cabled backplane.",
        "operationId": "link_kr_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "summary": "Enable or disable a link.",
        "operationId": "link_kr_set",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Boolean",
                "type": "boolean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/linkup": {
      "get": {
        "summary": "Return whether a link is up.",
        "operationId": "link_linkup_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/mac": {
      "get": {
        "summary": "Get a link's MAC address.",
        "operationId": "link_mac_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MacAddr"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "summary": "Set a link's MAC address.",
        "operationId": "link_mac_set",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MacAddr"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/nat_only": {
      "get": {
        "summary": "Return whether the link is configured to drop non-nat traffic",
        "operationId": "link_nat_only_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "summary": "Set whether a port is configured to use drop non-nat traffic",
        "operationId": "link_nat_only_set",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Boolean",
                "type": "boolean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/prbs": {
      "get": {
        "summary": "Return the link's PRBS speed and mode.",
        "description": "During link training, a pseudorandom bit sequence (PRBS) is used to allow each side to synchronize their clocks and set various parameters on the underlying circuitry (such as filter gains).",
        "operationId": "link_prbs_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortPrbsMode"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "summary": "Set a link's PRBS speed and mode.",
        "operationId": "link_prbs_set",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortPrbsMode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/serdes/adapt": {
      "get": {
        "summary": "Get the per-lane adaptation counts for each lane on this link",
        "operationId": "link_rx_adapt_count_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_DfeAdaptationState",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DfeAdaptationState"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/serdes/anlt_status": {
      "get": {
        "summary": "Get the per-lane AN/LT status for each lane on this link",
        "operationId": "link_an_lt_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnLtStatus"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/serdes/enc_speed": {
      "get": {
        "summary": "Get the per-lane speed and encoding for each lane on this link",
        "operationId": "link_enc_speed_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_EncSpeed",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EncSpeed"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/serdes/eye": {
      "get": {
        "summary": "Get the per-lane eye measurements for each lane on this link",
        "operationId": "link_eye_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_SerdesEye",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SerdesEye"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/serdes/lane_map": {
      "get": {
        "summary": "Get the logical->physical mappings for each lane in this port",
        "operationId": "lane_map_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LaneMap"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/serdes/rx_sig": {
      "get": {
        "summary": "Get the per-lane rx signal info for each lane on this link",
        "operationId": "link_rx_sig_info_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_RxSigInfo",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RxSigInfo"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/links/{link_id}/serdes/tx_eq": {
      "get": {
        "summary": "Get the per-lane tx eq settings for each lane on this link",
        "operationId": "link_tx_eq_get",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_TxEqSwHw",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TxEqSwHw"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "summary": "Update the per-lane tx eq settings for all lanes on this link",
        "operationId": "link_tx_eq_set",
        "parameters": [
          {
            "in": "path",
            "name": "link_id",
            "description": "The link in the switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TxEq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/management-mode": {
      "get": {
        "summary": "Return the current management mode of a QSFP switch port.",
        "operationId": "management_mode_get",
        "parameters": [
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementMode"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "summary": "Set the current management mode of a QSFP switch port.",
        "operationId": "management_mode_set",
        "parameters": [
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagementMode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/transceiver": {
      "get": {
        "summary": "Return the information about a port's transceiver.",
        "description": "This returns the status (presence, power state, etc) of the transceiver along with its identifying information. If the port is an optical switch port, but has no transceiver, then the identifying information is empty.\n\nIf the switch port is not a QSFP port, and thus could never have a transceiver, then \"Not Found\" is returned.",
        "operationId": "transceiver_get",
        "parameters": [
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transceiver"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/transceiver/datapath": {
      "get": {
        "summary": "Fetch the state of the datapath for the provided transceiver.",
        "operationId": "transceiver_datapath_get",
        "parameters": [
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Datapath"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/transceiver/monitors": {
      "get": {
        "summary": "Fetch the monitored environmental information for the provided transceiver.",
        "operationId": "transceiver_monitors_get",
        "parameters": [
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Monitors"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/transceiver/power": {
      "get": {
        "summary": "Return the power state of a transceiver.",
        "operationId": "transceiver_power_get",
        "parameters": [
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PowerState"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "summary": "Control the power state of a transceiver.",
        "operationId": "transceiver_power_set",
        "parameters": [
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PowerState"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ports/{port_id}/transceiver/reset": {
      "post": {
        "summary": "Effect a module-level reset of a QSFP transceiver.",
        "description": "If the QSFP port has no transceiver or is not a QSFP port, then a client error is returned.",
        "operationId": "transceiver_reset",
        "parameters": [
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port on which to operate.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/route/ipv4": {
      "get": {
        "summary": "Fetch the configured IPv4 routes, mapping IPv4 CIDR blocks to the switch port",
        "description": "used for sending out that traffic, and optionally a gateway.",
        "operationId": "route_ipv4_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "put": {
        "summary": "Route an IPv4 subnet to a link and a nexthop gateway.",
        "description": "This call can be used to create a new single-path route or to replace any existing routes with a new single-path route.",
        "operationId": "route_ipv4_set",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Route an IPv4 subnet to a link and a nexthop gateway.",
        "description": "This call can be used to create a new single-path route or to add new targets to a multipath route.",
        "operationId": "route_ipv4_add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/route/ipv4/{cidr}": {
      "get": {
        "summary": "Get the configured route for the given IPv4 subnet.",
        "operationId": "route_ipv4_get",
        "parameters": [
          {
            "in": "path",
            "name": "cidr",
            "description": "The IPv4 subnet in CIDR notation whose route entry is returned.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Ipv4Net"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_Ipv4Route",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ipv4Route"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Remove all targets for the given subnet",
        "operationId": "route_ipv4_delete",
        "parameters": [
          {
            "in": "path",
            "name": "cidr",
            "description": "The IPv4 subnet in CIDR notation whose route entry is returned.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Ipv4Net"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/route/ipv4/{cidr}/{port_id}/{link_id}/{tgt_ip}": {
      "delete": {
        "summary": "Remove a single target for the given subnet",
        "operationId": "route_ipv4_delete_target",
        "parameters": [
          {
            "in": "path",
            "name": "cidr",
            "description": "The subnet being routed",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Ipv4Net"
            }
          },
          {
            "in": "path",
            "name": "link_id",
            "description": "The link to which packets should be sent",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LinkId"
            }
          },
          {
            "in": "path",
            "name": "port_id",
            "description": "The switch port to which packets should be sent",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PortId"
            }
          },
          {
            "in": "path",
            "name": "tgt_ip",
            "description": "The next hop in the IPv4 route",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ipv4"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/route/ipv6": {
      "get": {
        "summary": "Fetch the configured IPv6 routes, mapping IPv6 CIDR blocks to the switch port",
        "description": "used for sending out that traffic, and optionally a gateway.",
        "operationId": "route_ipv6_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "put": {
        "summary": "Route an IPv6 subnet to a link and a nexthop gateway.",
        "description": "This call can be used to create a new single-path route or to replace any existing routes with a new single-path route.",
        "operationId": "route_ipv6_set",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Route an IPv6 subnet to a link and a nexthop gateway.",
        "description": "This call can be used to create a new single-path route or to add new targets to a multipath route.",
        "operationId": "route_ipv6_add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/route/ipv6/{cidr}": {
      "get": {
        "summary": "Get a single IPv6 route, by its IPv6 CIDR block.",
        "operationId": "route_ipv6_get",
        "parameters": [
          {
            "in": "path",
            "name": "cidr",
            "description": "The IPv6 subnet in CIDR notation whose route entry is returned.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Ipv6Net"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_Ipv6Route",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ipv6Route"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Remove an IPv6 route, by its IPv6 CIDR block.",
        "operationId": "route_ipv6_delete",
        "parameters": [
          {
            "in": "path",
            "name": "cidr",
            "description": "The IPv6 subnet in CIDR notation whose route entry is returned.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Ipv6Net"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/rpw/nat/ipv4/gen": {
      "get": {
        "summary": "Get NATv4 generation number",
        "operationId": "ipv4_nat_generation",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "int64",
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/rpw/nat/ipv4/trigger": {
      "post": {
        "summary": "Trigger NATv4 Reconciliation",
        "operationId": "ipv4_nat_trigger_update",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Null",
                  "type": "string",
                  "enum": [
                    null
                  ]
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/switch/identifiers": {
      "get": {
        "summary": "Get switch identifiers.",
        "description": "This endpoint returns the switch identifiers, which can be used for consistent field definitions across oximeter time series schemas.",
        "operationId": "switch_identifiers",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwitchIdentifiers"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/table": {
      "get": {
        "summary": "Get the list of P4 tables",
        "operationId": "table_list",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_String",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/table/{table}/counters": {
      "get": {
        "summary": "Get any counter data from a single P4 match-action table.",
        "description": "The name of the table should match one of those returned by the `table_list()` call.",
        "operationId": "table_counters",
        "parameters": [
          {
            "in": "query",
            "name": "force_sync",
            "description": "Force a sync of the counters from the ASIC to memory, even if the default refresh timeout hasn't been reached.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "table",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_TableCounterEntry",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TableCounterEntry"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/table/{table}/dump": {
      "get": {
        "summary": "Get the contents of a single P4 table.",
        "description": "The name of the table should match one of those returned by the `table_list()` call.",
        "operationId": "table_dump",
        "parameters": [
          {
            "in": "path",
            "name": "table",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/transceivers": {
      "get": {
        "summary": "Return information about all QSFP transceivers.",
        "operationId": "transceivers_list",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Map_of_Transceiver",
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/Transceiver"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AnLtStatus": {
        "description": "A collection of the data involved in the autonegiation/link-training process",
        "type": "object",
        "properties": {
          "lanes": {
            "description": "The per-lane status",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LaneStatus"
            }
          },
          "lp_pages": {
            "description": "The base and extended pages received from the link partner",
            "allOf": [
              {
                "$ref": "#/components/schemas/LpPages"
              }
            ]
          }
        },
        "required": [
          "lanes",
          "lp_pages"
        ]
      },
      "AnStatus": {
        "description": "State of a single lane during autonegotiation",
        "type": "object",
        "properties": {
          "an_ability": {
            "description": "Are we capable of AN?",
            "type": "boolean"
          },
          "an_complete": {
            "description": "Is autonegotiation complete?",
            "type": "boolean"
          },
          "ext_np_status": {
            "description": "Is extended page format supported?",
            "type": "boolean"
          },
          "link_status": {
            "description": "Allegedly: is the link up?  In practice, this always seems to be false? TODO: investigate this",
            "type": "boolean"
          },
          "lp_an_ability": {
            "description": "Can the link partner perform AN?",
            "type": "boolean"
          },
          "page_rcvd": {
            "description": "has a base page been received?",
            "type": "boolean"
          },
          "parallel_detect_fault": {
            "description": "A fault has been detected via the parallel detection function",
            "type": "boolean"
          },
          "remote_fault": {
            "description": "Remote fault detected",
            "type": "boolean"
          }
        },
        "required": [
          "an_ability",
          "an_complete",
          "ext_np_status",
          "link_status",
          "lp_an_ability",
          "page_rcvd",
          "parallel_detect_fault",
          "remote_fault"
        ]
      },
      "ApplicationDescriptor": {
        "description": "An Application Descriptor describes the supported datapath configurations.\n\nThis is a CMIS-specific concept. It's used for modules to advertise how it can be used by the host. Each application describes the host-side electrical interface; the media-side interface; the number of lanes required; etc.\n\nHost-side software can select one of these applications to instruct the module to use a specific set of lanes, with the interface on either side of the module.",
        "type": "object",
        "properties": {
          "host_id": {
            "description": "The electrical interface with the host side.",
            "type": "string"
          },
          "host_lane_assignment_options": {
            "description": "The lanes on the host-side supporting this application.\n\nThis is a bit mask with a 1 identifying the lowest lane in a consecutive group of lanes to which the application can be assigned. This must be used with the `host_lane_count`. For example a value of `0b0000_0001` with a host lane count of 4 indicates that the first 4 lanes may be used in this application.\n\nAn application may support starting from multiple lanes.",
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "host_lane_count": {
            "description": "The number of host-side lanes.",
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "media_id": {
            "description": "The interface, optical or copper, with the media side.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MediaInterfaceId"
              }
            ]
          },
          "media_lane_assignment_options": {
            "description": "The lanes on the media-side supporting this application.\n\nSee `host_lane_assignment_options` for details.",
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "media_lane_count": {
            "description": "The number of media-side lanes.",
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          }
        },
        "required": [
          "host_id",
          "host_lane_assignment_options",
          "host_lane_count",
          "media_id",
          "media_lane_assignment_options",
          "media_lane_count"
        ]
      },
      "ArpEntry": {
        "description": "Represents the mapping of an IP address to a MAC address.",
        "type": "object",
        "properties": {
          "ip": {
            "description": "The IP address for the entry.",
            "type": "string",
            "format": "ip"
          },
          "mac": {
            "description": "The MAC address to which `ip` maps.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MacAddr"
              }
            ]
          },
          "tag": {
            "description": "A tag used to associate this entry with a client.",
            "type": "string"
          },
          "update": {
            "description": "The time the entry was updated",
            "type": "string"
          }
        },
        "required": [
          "ip",
          "mac",
          "tag",
          "update"
        ]
      },
      "ArpEntryResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ArpEntry"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Aux1Monitor": {
        "description": "The first auxlliary CMIS monitor.",
        "oneOf": [
          {
            "description": "The monitored property is custom, i.e., part-specific.",
            "type": "object",
            "properties": {
              "custom": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0
                },
                "minItems": 2,
                "maxItems": 2
              }
            },
            "required": [
              "custom"
            ],
            "additionalProperties": false
          },
          {
            "description": "The current of the laser thermoelectric cooler.\n\nFor actively-cooled laser systems, this specifies the percentage of the maximum current the thermoelectric cooler supports. If the percentage is positive, the cooler is heating the laser. If negative, the cooler is cooling the laser.",
            "type": "object",
            "properties": {
              "tec_current": {
                "type": "number",
                "format": "float"
              }
            },
            "required": [
              "tec_current"
            ],
            "additionalProperties": false
          }
        ]
      },
      "Aux2Monitor": {
        "description": "The second auxlliary CMIS monitor.",
        "oneOf": [
          {
            "description": "The temperature of the laser itself (degrees C).",
            "type": "object",
            "properties": {
              "laser_temperature": {
                "type": "number",
                "format": "float"
              }
            },
            "required": [
              "laser_temperature"
            ],
            "additionalProperties": false
          },
          {
            "description": "The current of the laser thermoelectric cooler.\n\nFor actively-cooled laser systems, this specifies the percentage of the maximum current the thermoelectric cooler supports. If the percentage is positive, the cooler is heating the laser. If negative, the cooler is cooling the laser.",
            "type": "object",
            "properties": {
              "tec_current": {
                "type": "number",
                "format": "float"
              }
            },
            "required": [
              "tec_current"
            ],
            "additionalProperties": false
          }
        ]
      },
      "Aux3Monitor": {
        "description": "The third auxlliary CMIS monitor.",
        "oneOf": [
          {
            "description": "The temperature of the laser itself (degrees C).",
            "type": "object",
            "properties": {
              "laser_temperature": {
                "type": "number",
                "format": "float"
              }
            },
            "required": [
              "laser_temperature"
            ],
            "additionalProperties": false
          },
          {
            "description": "Measured voltage of an additional power supply (Volts).",
            "type": "object",
            "properties": {
              "additional_supply_voltage": {
                "type": "number",
                "format": "float"
              }
            },
            "required": [
              "additional_supply_voltage"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AuxMonitors": {
        "description": "Auxlliary monitored values for CMIS modules.",
        "type": "object",
        "properties": {
          "aux1": {
            "nullable": true,
            "description": "Auxlliary monitor 1, either a custom value or TEC current.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Aux1Monitor"
              }
            ]
          },
          "aux2": {
            "nullable": true,
            "description": "Auxlliary monitor 1, either laser temperature or TEC current.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Aux2Monitor"
              }
            ]
          },
          "aux3": {
            "nullable": true,
            "description": "Auxlliary monitor 1, either laser temperature or additional supply voltage.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Aux3Monitor"
              }
            ]
          },
          "custom": {
            "nullable": true,
            "description": "A custom monitor. The value here is entirely vendor- and part-specific, so the part's data sheet must be consulted. The value may be either a signed or unsigned 16-bit integer, and so is included as raw bytes.",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0
            },
            "minItems": 2,
            "maxItems": 2
          }
        }
      },
      "BackplaneCableLeg": {
        "description": "The leg of the backplane cable.\n\nThis describes the leg on the actual backplane cable that connects the Sidecar chassis connector to a cubby endpoint.",
        "type": "string",
        "enum": [
          "A",
          "B",
          "C",
          "D"
        ]
      },
      "BackplaneLink": {
        "description": "A single point-to-point connection on the cabled backplane.\n\nThis describes a single link from the Sidecar switch to a cubby, via the cabled backplane. It ultimately maps the Tofino ASIC pins to the cubby at which that link terminates. This path follows the Sidecar internal cable; the Sidecar chassis connector; and the backplane cable itself. This is used to map the Tofino driver's \"connector\" number (an index in its possible pinouts) through the backplane to our logical cubby numbering.",
        "type": "object",
        "properties": {
          "backplane_leg": {
            "$ref": "#/components/schemas/BackplaneCableLeg"
          },
          "cubby": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "sidecar_connector": {
            "$ref": "#/components/schemas/SidecarConnector"
          },
          "sidecar_leg": {
            "$ref": "#/components/schemas/SidecarCableLeg"
          },
          "tofino_connector": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          }
        },
        "required": [
          "backplane_leg",
          "cubby",
          "sidecar_connector",
          "sidecar_leg",
          "tofino_connector"
        ]
      },
      "BuildInfo": {
        "description": "Detailed build information about `dpd`.",
        "type": "object",
        "properties": {
          "cargo_triple": {
            "type": "string"
          },
          "debug": {
            "type": "boolean"
          },
          "git_branch": {
            "type": "string"
          },
          "git_commit_timestamp": {
            "type": "string"
          },
          "git_sha": {
            "type": "string"
          },
          "opt_level": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "rustc_channel": {
            "type": "string"
          },
          "rustc_commit_sha": {
            "type": "string"
          },
          "rustc_host_triple": {
            "type": "string"
          },
          "rustc_semver": {
            "type": "string"
          },
          "sde_commit_sha": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "cargo_triple",
          "debug",
          "git_branch",
          "git_commit_timestamp",
          "git_sha",
          "opt_level",
          "rustc_channel",
          "rustc_commit_sha",
          "rustc_host_triple",
          "rustc_semver",
          "sde_commit_sha",
          "version"
        ]
      },
      "CmisDatapath": {
        "description": "A datapath in a CMIS module.\n\nIn contrast to SFF-8636, CMIS makes first-class the concept of a datapath: a set of lanes and all the associated machinery involved in the transfer of data. This includes:\n\n- The \"application descriptor\" which is the host and media interfaces, and the lanes on each side used to transfer data; - The state of the datapath in a well-defined finite state machine (see CMIS 5.0 section 6.3.3); - The flags indicating how the datapath components are operating, such as receiving an input Rx signal or whether the transmitter is disabled.",
        "type": "object",
        "properties": {
          "application": {
            "description": "The application descriptor for this datapath.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplicationDescriptor"
              }
            ]
          },
          "lane_status": {
            "description": "The status bits for each lane in the datapath.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CmisLaneStatus"
            }
          }
        },
        "required": [
          "application",
          "lane_status"
        ]
      },
      "CmisLaneStatus": {
        "description": "The status of a single CMIS lane.\n\nIf any particular control or status value is unsupported by a module, it is `None`.",
        "type": "object",
        "properties": {
          "rx_auto_squelch_disable": {
            "nullable": true,
            "description": "Whether the host-side has disabled the Rx auto-squelch.\n\nThe module can implement automatic squelching of the Rx output, if the media-side input signal isn't valid. This indicates whether the host has disabled such a setting.",
            "type": "boolean"
          },
          "rx_lol": {
            "nullable": true,
            "description": "Media-side loss of lock flag.\n\nThis is true if the module is not able to extract a clock signal from the media-side signal (usually optical).",
            "type": "boolean"
          },
          "rx_los": {
            "nullable": true,
            "description": "Media-side loss of signal flag.\n\nThis is true if there is no detected input signal from the media-side (usually optical).",
            "type": "boolean"
          },
          "rx_output_enabled": {
            "nullable": true,
            "description": "Whether the Rx output is enabled.\n\nThe host may control this to disable the electrical output from the module to the host.",
            "type": "boolean"
          },
          "rx_output_polarity": {
            "nullable": true,
            "description": "The Rx output polarity.\n\nThis indicates a host-side control that flips the polarity of the host-side output signal.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LanePolarity"
              }
            ]
          },
          "rx_output_status": {
            "description": "Status of host-side Rx output.\n\nThis indicates whether the Rx output is sending a valid signal to the host. Note that this is `Invalid` if the output is either muted (such as squelched) or explicitly disabled.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OutputStatus"
              }
            ]
          },
          "state": {
            "description": "The datapath state of this lane.\n\nSee CMIS 5.0 section 8.9.1 for details.",
            "type": "string"
          },
          "tx_adaptive_eq_fail": {
            "nullable": true,
            "description": "A failure in the Tx adaptive input equalization.",
            "type": "boolean"
          },
          "tx_auto_squelch_disable": {
            "nullable": true,
            "description": "Whether the host-side has disabled the Tx auto-squelch.\n\nThe module can implement automatic squelching of the Tx output, if the host-side input signal isn't valid. This indicates whether the host has disabled such a setting.",
            "type": "boolean"
          },
          "tx_failure": {
            "nullable": true,
            "description": "General Tx failure flag.\n\nThis indicates that an internal and unspecified malfunction has occurred on the Tx lane.",
            "type": "boolean"
          },
          "tx_force_squelch": {
            "nullable": true,
            "description": "Whether the host-side has force-squelched the Tx output.\n\nThis indicates that the host can _force_ squelching the output if the signal is not valid.",
            "type": "boolean"
          },
          "tx_input_polarity": {
            "nullable": true,
            "description": "The Tx input polarity.\n\nThis indicates a host-side control that flips the polarity of the host-side input signal.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LanePolarity"
              }
            ]
          },
          "tx_lol": {
            "nullable": true,
            "description": "Host-side loss of lock flag.\n\nThis is true if the module is not able to extract a clock signal from the host-side electrical signal.",
            "type": "boolean"
          },
          "tx_los": {
            "nullable": true,
            "description": "Host-side loss of signal flag.\n\nThis is true if there is no detected electrical signal from the host-side serdes.",
            "type": "boolean"
          },
          "tx_output_enabled": {
            "nullable": true,
            "description": "Whether the Tx output is enabled.",
            "type": "boolean"
          },
          "tx_output_status": {
            "description": "Status of media-side Tx output.\n\nThis indicates whether the Rx output is sending a valid signal to the media itself. Note that this is `Invalid` if the output is either muted (such as squelched) or explicitly disabled.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OutputStatus"
              }
            ]
          }
        },
        "required": [
          "rx_output_status",
          "state",
          "tx_output_status"
        ]
      },
      "CounterData": {
        "description": "For a counter, this contains the number of bytes, packets, or both that were counted. XXX: Ideally this would be a data-bearing enum, with variants for Pkts, Bytes, and PktsAndBytes.  However OpenApi doesn't yet have the necessary support, so we're left with this clumsier representation.",
        "type": "object",
        "properties": {
          "bytes": {
            "nullable": true,
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "pkts": {
            "nullable": true,
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          }
        }
      },
      "Datapath": {
        "description": "Information about a transceiver's datapath.\n\nThis includes state related to the low-level eletrical and optical path through which bits flow. This includes flags like loss-of-signal / loss-of-lock; transmitter enablement state; and equalization parameters.",
        "oneOf": [
          {
            "description": "A number of datapaths in a CMIS module.\n\nCMIS modules may have a large number of supported configurations of their various lanes, each called an \"application\". These are described by the `ApplicationDescriptor` type, which mirrors CMIS 5.0 table 8-18. Each descriptor is identified by an \"Application Selector Code\", which is just its index in the section of the memory map describing them.\n\nEach lane can be used in zero or more applications, however, it may exist in at most one application at a time. These active applications, of which there may be more than one, are keyed by their codes in the contained mapping.",
            "type": "object",
            "properties": {
              "cmis": {
                "type": "object",
                "properties": {
                  "connector": {
                    "description": "The type of free-side connector",
                    "type": "string"
                  },
                  "datapaths": {
                    "description": "Mapping from \"application selector\" ID to its datapath information.\n\nThe datapath inclues the lanes used; host electrical interface; media interface; and a lot more about the state of the path.",
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/CmisDatapath"
                    }
                  },
                  "supported_lanes": {
                    "description": "A bit mask with a 1 in bit `i` if the `i`th lane is supported.",
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0
                  }
                },
                "required": [
                  "connector",
                  "datapaths",
                  "supported_lanes"
                ]
              }
            },
            "required": [
              "cmis"
            ],
            "additionalProperties": false
          },
          {
            "description": "Datapath state about each lane in an SFF-8636 module.",
            "type": "object",
            "properties": {
              "sff8636": {
                "type": "object",
                "properties": {
                  "connector": {
                    "description": "The type of a media-side connector.\n\nThese values come from SFF-8024 Rev 4.10 Table 4-3.",
                    "type": "string"
                  },
                  "lanes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Sff8636Datapath"
                    },
                    "minItems": 4,
                    "maxItems": 4
                  },
                  "specification": {
                    "$ref": "#/components/schemas/SffComplianceCode"
                  }
                },
                "required": [
                  "connector",
                  "lanes",
                  "specification"
                ]
              }
            },
            "required": [
              "sff8636"
            ],
            "additionalProperties": false
          }
        ]
      },
      "DfeAdaptationState": {
        "description": "Rx DFE adaptation information",
        "type": "object",
        "properties": {
          "adapt_cnt": {
            "description": "Total DFE attempts",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "adapt_done": {
            "description": "DFE complete",
            "type": "boolean"
          },
          "link_lost_cnt": {
            "description": "Times the signal was lost since the last read",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "readapt_cnt": {
            "description": "DFE attempts since the last read",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          }
        },
        "required": [
          "adapt_cnt",
          "adapt_done",
          "link_lost_cnt",
          "readapt_cnt"
        ]
      },
      "ElectricalMode": {
        "description": "The electrical mode of a QSFP-capable port.\n\nQSFP ports can be broken out into one of several different electrical configurations or modes. This describes how the transmit/receive lanes are grouped into a single, logical link.\n\nNote that the electrical mode may only be changed if there are no links within the port, _and_ if the inserted QSFP module actually supports this mode.",
        "oneOf": [
          {
            "description": "All transmit/receive lanes are used for a single link.",
            "type": "string",
            "enum": [
              "Single"
            ]
          }
        ]
      },
      "EncSpeed": {
        "description": "Signal speed and encoding for a single lane",
        "type": "object",
        "properties": {
          "encoding": {
            "$ref": "#/components/schemas/LaneEncoding"
          },
          "gigabits": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          }
        },
        "required": [
          "encoding",
          "gigabits"
        ]
      },
      "Error": {
        "description": "Error information from a response.",
        "type": "object",
        "properties": {
          "error_code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "request_id"
        ]
      },
      "Fault": {
        "description": "A Fault represents a specific kind of failure, and carries some additional context.  Currently Faults are only used to describe Link failures, but there is no reason they couldn't be used elsewhere.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "LinkFlap": {
                "type": "string"
              }
            },
            "required": [
              "LinkFlap"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "Autoneg": {
                "type": "string"
              }
            },
            "required": [
              "Autoneg"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "Injected": {
                "type": "string"
              }
            },
            "required": [
              "Injected"
            ],
            "additionalProperties": false
          }
        ]
      },
      "FaultCondition": {
        "description": "Represents a potential fault condtion on a link",
        "type": "object",
        "properties": {
          "fault": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Fault"
              }
            ]
          }
        }
      },
      "FaultReason": {
        "description": "The cause of a fault on a transceiver.",
        "oneOf": [
          {
            "description": "An error occurred accessing the transceiver.",
            "type": "string",
            "enum": [
              "failed"
            ]
          },
          {
            "description": "Power was enabled, but did not come up in the requisite time.",
            "type": "string",
            "enum": [
              "power_timeout"
            ]
          },
          {
            "description": "Power was enabled and later lost.",
            "type": "string",
            "enum": [
              "power_lost"
            ]
          },
          {
            "description": "The service processor disabled the transceiver.\n\nThe SP is responsible for monitoring the thermal data from the transceivers, and controlling the fans to compensate. If a module's thermal data cannot be read, the SP may completely disable the transceiver to ensure it cannot overheat the Sidecar.",
            "type": "string",
            "enum": [
              "disabled_by_sp"
            ]
          }
        ]
      },
      "FecRSCounters": {
        "description": "Per-port RS FEC counters",
        "type": "object",
        "properties": {
          "fec_align_status": {
            "description": "All lanes synced and aligned",
            "type": "boolean"
          },
          "fec_corr_cnt": {
            "description": "FEC corrected blocks",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "fec_ser_lane_0": {
            "description": "FEC symbol errors on lane 0",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "fec_ser_lane_1": {
            "description": "FEC symbol errors on lane 1",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "fec_ser_lane_2": {
            "description": "FEC symbol errors on lane 2",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "fec_ser_lane_3": {
            "description": "FEC symbol errors on lane 3",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "fec_ser_lane_4": {
            "description": "FEC symbol errors on lane 4",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "fec_ser_lane_5": {
            "description": "FEC symbol errors on lane 5",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "fec_ser_lane_6": {
            "description": "FEC symbol errors on lane 6",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "fec_ser_lane_7": {
            "description": "FEC symbol errors on lane 7",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "fec_uncorr_cnt": {
            "description": "FEC uncorrected blocks",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "hi_ser": {
            "description": "symbol errors exceeds threshhold",
            "type": "boolean"
          },
          "port": {
            "description": "Port being tracked",
            "type": "string"
          }
        },
        "required": [
          "fec_align_status",
          "fec_corr_cnt",
          "fec_ser_lane_0",
          "fec_ser_lane_1",
          "fec_ser_lane_2",
          "fec_ser_lane_3",
          "fec_ser_lane_4",
          "fec_ser_lane_5",
          "fec_ser_lane_6",
          "fec_ser_lane_7",
          "fec_uncorr_cnt",
          "hi_ser",
          "port"
        ]
      },
      "FreeChannels": {
        "description": "Represents the free MAC channels on a single physical port.",
        "type": "object",
        "properties": {
          "channels": {
            "description": "The set of available channels (lanes) on this connector.",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0
            }
          },
          "connector": {
            "description": "The Tofino connector for this port.\n\nThis describes the set of electrical connections representing this port object, which are defined by the pinout and board design of the Sidecar.",
            "type": "string"
          },
          "port_id": {
            "description": "The switch port.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortId"
              }
            ]
          }
        },
        "required": [
          "channels",
          "connector",
          "port_id"
        ]
      },
      "IpNet": {
        "x-rust-type": {
          "crate": "oxnet",
          "path": "oxnet::IpNet",
          "version": "0.1.0"
        },
        "oneOf": [
          {
            "title": "v4",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Net"
              }
            ]
          },
          {
            "title": "v6",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            ]
          }
        ]
      },
      "Ipv4Entry": {
        "description": "An IPv4 address assigned to a link.",
        "type": "object",
        "properties": {
          "addr": {
            "description": "The IP address.",
            "type": "string",
            "format": "ipv4"
          },
          "tag": {
            "description": "Client-side tag for this object.",
            "type": "string"
          }
        },
        "required": [
          "addr",
          "tag"
        ]
      },
      "Ipv4EntryResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ipv4Entry"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Ipv4Nat": {
        "description": "represents an IPv4 NAT reservation",
        "type": "object",
        "properties": {
          "external": {
            "type": "string",
            "format": "ipv4"
          },
          "high": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "low": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "target": {
            "$ref": "#/components/schemas/NatTarget"
          }
        },
        "required": [
          "external",
          "high",
          "low",
          "target"
        ]
      },
      "Ipv4NatResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ipv4Nat"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Ipv4Net": {
        "example": "192.168.1.0/24",
        "title": "An IPv4 subnet",
        "description": "An IPv4 subnet, including prefix and prefix length",
        "x-rust-type": {
          "crate": "oxnet",
          "path": "oxnet::Ipv4Net",
          "version": "0.1.0"
        },
        "type": "string",
        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/([0-9]|1[0-9]|2[0-9]|3[0-2])$"
      },
      "Ipv4Route": {
        "description": "A route for an IPv4 subnet.",
        "type": "object",
        "properties": {
          "link_id": {
            "$ref": "#/components/schemas/LinkId"
          },
          "port_id": {
            "$ref": "#/components/schemas/PortId"
          },
          "tag": {
            "type": "string"
          },
          "tgt_ip": {
            "type": "string",
            "format": "ipv4"
          },
          "vlan_id": {
            "nullable": true,
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "link_id",
          "port_id",
          "tag",
          "tgt_ip"
        ]
      },
      "Ipv6Entry": {
        "description": "An IPv6 address assigned to a link.",
        "type": "object",
        "properties": {
          "addr": {
            "description": "The IP address.",
            "type": "string",
            "format": "ipv6"
          },
          "tag": {
            "description": "Client-side tag for this object.",
            "type": "string"
          }
        },
        "required": [
          "addr",
          "tag"
        ]
      },
      "Ipv6EntryResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ipv6Entry"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Ipv6Nat": {
        "description": "represents an IPv6 NAT reservation",
        "type": "object",
        "properties": {
          "external": {
            "type": "string",
            "format": "ipv6"
          },
          "high": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "low": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "target": {
            "$ref": "#/components/schemas/NatTarget"
          }
        },
        "required": [
          "external",
          "high",
          "low",
          "target"
        ]
      },
      "Ipv6NatResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ipv6Nat"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Ipv6Net": {
        "example": "fd12:3456::/64",
        "title": "An IPv6 subnet",
        "description": "An IPv6 subnet, including prefix and subnet mask",
        "x-rust-type": {
          "crate": "oxnet",
          "path": "oxnet::Ipv6Net",
          "version": "0.1.0"
        },
        "type": "string",
        "pattern": "^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$"
      },
      "Ipv6Route": {
        "description": "A route for an IPv6 subnet.",
        "type": "object",
        "properties": {
          "link_id": {
            "$ref": "#/components/schemas/LinkId"
          },
          "port_id": {
            "$ref": "#/components/schemas/PortId"
          },
          "tag": {
            "type": "string"
          },
          "tgt_ip": {
            "type": "string",
            "format": "ipv6"
          },
          "vlan_id": {
            "nullable": true,
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "link_id",
          "port_id",
          "tag",
          "tgt_ip"
        ]
      },
      "LaneEncoding": {
        "description": "Signal encoding",
        "oneOf": [
          {
            "description": "Pulse Amplitude Modulation 4-level",
            "type": "string",
            "enum": [
              "Pam4"
            ]
          },
          {
            "description": "Non-Return-to-Zero encoding",
            "type": "string",
            "enum": [
              "Nrz"
            ]
          },
          {
            "description": "No encoding selected",
            "type": "string",
            "enum": [
              "None"
            ]
          }
        ]
      },
      "LaneMap": {
        "description": "Mapping of the logical lanes in a link to their physical instantiation in the MAC/serdes interface.",
        "type": "object",
        "properties": {
          "logical_lane": {
            "description": "logical lane within the mac block for each lane",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          "mac_block": {
            "description": "MAC block in the tofino ASIC",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "rx_phys": {
            "description": "Rx logical->physical mapping",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          "rx_polarity": {
            "description": "Rx polarity",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Polarity"
            }
          },
          "tx_phys": {
            "description": "Tx logical->physical mapping",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          "tx_polarity": {
            "description": "Tx polarity",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Polarity"
            }
          }
        },
        "required": [
          "logical_lane",
          "mac_block",
          "rx_phys",
          "rx_polarity",
          "tx_phys",
          "tx_polarity"
        ]
      },
      "LanePolarity": {
        "description": "The polarity of a transceiver lane.",
        "type": "string",
        "enum": [
          "normal",
          "flipped"
        ]
      },
      "LaneStatus": {
        "description": "The combined status of a lane, with respect to the autonegotiation / link-training process.",
        "type": "object",
        "properties": {
          "lane_an_status": {
            "description": "Detailed autonegotiation status",
            "allOf": [
              {
                "$ref": "#/components/schemas/AnStatus"
              }
            ]
          },
          "lane_done": {
            "description": "Has a lane successfully completed autoneg and link training?",
            "type": "boolean"
          },
          "lane_lt_status": {
            "description": "Detailed link-training status",
            "allOf": [
              {
                "$ref": "#/components/schemas/LtStatus"
              }
            ]
          }
        },
        "required": [
          "lane_an_status",
          "lane_done",
          "lane_lt_status"
        ]
      },
      "Led": {
        "description": "Information about a QSFP port's LED.",
        "type": "object",
        "properties": {
          "policy": {
            "description": "The policy by which the LED is controlled.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LedPolicy"
              }
            ]
          },
          "state": {
            "description": "The state of the LED.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LedState"
              }
            ]
          }
        },
        "required": [
          "policy",
          "state"
        ]
      },
      "LedPolicy": {
        "description": "The policy by which a port's LED is controlled.",
        "oneOf": [
          {
            "description": "The default policy is for the LED to reflect the port's state itself.\n\nIf the port is operating normally, the LED will be solid on. Without a transceiver, the LED will be solid off. A blinking LED is used to indicate an unsupported module or other failure on that port.",
            "type": "string",
            "enum": [
              "automatic"
            ]
          },
          {
            "description": "The LED is explicitly overridden by client requests.",
            "type": "string",
            "enum": [
              "override"
            ]
          }
        ]
      },
      "LedState": {
        "description": "The state of a module's attention LED, on the Sidecar front IO panel.",
        "oneOf": [
          {
            "description": "The LED is off.\n\nThis indicates that the port is disabled or not working at all.",
            "type": "string",
            "enum": [
              "off"
            ]
          },
          {
            "description": "The LED is solid on.\n\nThis indicates that the port is working as expected and enabled.",
            "type": "string",
            "enum": [
              "on"
            ]
          },
          {
            "description": "The LED is blinking.\n\nThis is used to draw attention to the port, such as to indicate a fault or to locate a port for servicing.",
            "type": "string",
            "enum": [
              "blink"
            ]
          }
        ]
      },
      "Link": {
        "description": "An Ethernet-capable link within a switch port.",
        "type": "object",
        "properties": {
          "address": {
            "description": "The MAC address for the link.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MacAddr"
              }
            ]
          },
          "asic_id": {
            "description": "The lower-level ASIC ID used to refer to this object in the switch driver software.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "autoneg": {
            "description": "True if this link is configured to autonegotiate with its peer.",
            "type": "boolean"
          },
          "enabled": {
            "description": "True if this link is enabled.",
            "type": "boolean"
          },
          "fec": {
            "nullable": true,
            "description": "The error-correction scheme for this link.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortFec"
              }
            ]
          },
          "fsm_state": {
            "description": "Current state in the autonegotiation/link-training finite state machine",
            "type": "string"
          },
          "ipv6_enabled": {
            "description": "The link is configured for IPv6 use",
            "type": "boolean"
          },
          "kr": {
            "description": "True if this link is in KR mode, i.e., is on a cabled backplane.",
            "type": "boolean"
          },
          "link_id": {
            "description": "The `LinkId` within the switch port for this link.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkId"
              }
            ]
          },
          "link_state": {
            "description": "The state of the Ethernet link.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkState"
              }
            ]
          },
          "media": {
            "description": "The physical media underlying this link.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortMedia"
              }
            ]
          },
          "port_id": {
            "description": "The switch port on which this link exists.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortId"
              }
            ]
          },
          "prbs": {
            "description": "The PRBS mode.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortPrbsMode"
              }
            ]
          },
          "presence": {
            "description": "True if the transceiver module has detected a media presence.",
            "type": "boolean"
          },
          "speed": {
            "description": "The speed of the link.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortSpeed"
              }
            ]
          },
          "tofino_connector": {
            "description": "The Tofino connector number associated with this link.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "address",
          "asic_id",
          "autoneg",
          "enabled",
          "fsm_state",
          "ipv6_enabled",
          "kr",
          "link_id",
          "link_state",
          "media",
          "port_id",
          "prbs",
          "presence",
          "speed",
          "tofino_connector"
        ]
      },
      "LinkCreate": {
        "description": "Parameters used to create a link on a switch port.",
        "type": "object",
        "properties": {
          "autoneg": {
            "description": "Whether the link is configured to autonegotiate with its peer during link training.\n\nThis is generally only true for backplane links, and defaults to `false`.",
            "default": false,
            "type": "boolean"
          },
          "fec": {
            "nullable": true,
            "description": "The requested forward-error correction method.  If this is None, the standard FEC for the underlying media will be applied if it can be determined.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortFec"
              }
            ]
          },
          "kr": {
            "description": "Whether the link is configured in KR mode, an electrical specification generally only true for backplane link.\n\nThis defaults to `false`.",
            "default": false,
            "type": "boolean"
          },
          "lane": {
            "nullable": true,
            "description": "The first lane of the port to use for the new link",
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkId"
              }
            ]
          },
          "speed": {
            "description": "The requested speed of the link.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortSpeed"
              }
            ]
          },
          "tx_eq": {
            "nullable": true,
            "description": "Transceiver equalization adjustment parameters. This defaults to `None`.",
            "default": null,
            "allOf": [
              {
                "$ref": "#/components/schemas/TxEq"
              }
            ]
          }
        },
        "required": [
          "speed"
        ]
      },
      "LinkEvent": {
        "type": "object",
        "properties": {
          "channel": {
            "nullable": true,
            "description": "Channel ID for sub-link-level events",
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "class": {
            "description": "Event class",
            "type": "string"
          },
          "details": {
            "nullable": true,
            "description": "Optionally, additional details about the event",
            "type": "string"
          },
          "subclass": {
            "description": "Event subclass",
            "type": "string"
          },
          "timestamp": {
            "description": "Time the event occurred.  The time is represented in milliseconds, starting at an undefined time in the past.  This means that timestamps can be used to measure the time between events, but not to determine the wall-clock time at which the event occurred.",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "class",
          "subclass",
          "timestamp"
        ]
      },
      "LinkFecRSCounters": {
        "description": "The FEC counters for a specific link, including its link ID.",
        "type": "object",
        "properties": {
          "counters": {
            "description": "The FEC counter data.",
            "allOf": [
              {
                "$ref": "#/components/schemas/FecRSCounters"
              }
            ]
          },
          "link_id": {
            "description": "The link ID.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkId"
              }
            ]
          },
          "port_id": {
            "description": "The switch port ID.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortId"
              }
            ]
          }
        },
        "required": [
          "counters",
          "link_id",
          "port_id"
        ]
      },
      "LinkFsmCounter": {
        "description": "Reports how many times a given autoneg/link-training state has been entered",
        "type": "object",
        "properties": {
          "current": {
            "description": "Times entered since the link was last enabled",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "state_name": {
            "description": "FSM state being counted",
            "type": "string"
          },
          "total": {
            "description": "Times entered since the link was created",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          }
        },
        "required": [
          "current",
          "state_name",
          "total"
        ]
      },
      "LinkFsmCounters": {
        "description": "Reports all the autoneg/link-training states a link has transitioned into.",
        "type": "object",
        "properties": {
          "counters": {
            "description": "All the states this link has entered, along with counts of how many times each state was entered.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkFsmCounter"
            }
          },
          "link_path": {
            "description": "Link being reported",
            "type": "string"
          }
        },
        "required": [
          "counters",
          "link_path"
        ]
      },
      "LinkHistory": {
        "type": "object",
        "properties": {
          "events": {
            "description": "The set of historical events recorded",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkEvent"
            }
          },
          "timestamp": {
            "description": "The timestamp in milliseconds at which this history was collected.",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "events",
          "timestamp"
        ]
      },
      "LinkId": {
        "description": "An identifier for a link within a switch port.\n\nA switch port identified by a [`PortId`] may have multiple links within it, each identified by a `LinkId`. These are unique within a switch port only.",
        "type": "integer",
        "format": "uint8",
        "minimum": 0
      },
      "LinkPcsCounters": {
        "description": "The Physical Coding Sublayer (PCS) counters for a specific link.",
        "type": "object",
        "properties": {
          "counters": {
            "description": "The PCS counter data.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PcsCounters"
              }
            ]
          },
          "link_id": {
            "description": "The link ID.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkId"
              }
            ]
          },
          "port_id": {
            "description": "The switch port ID.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortId"
              }
            ]
          }
        },
        "required": [
          "counters",
          "link_id",
          "port_id"
        ]
      },
      "LinkRMonCounters": {
        "description": "The RMON counters (traffic counters) for a specific link.",
        "type": "object",
        "properties": {
          "counters": {
            "description": "The RMON counter data.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RMonCounters"
              }
            ]
          },
          "link_id": {
            "description": "The link ID.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkId"
              }
            ]
          },
          "port_id": {
            "description": "The switch port ID.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortId"
              }
            ]
          }
        },
        "required": [
          "counters",
          "link_id",
          "port_id"
        ]
      },
      "LinkRMonCountersAll": {
        "description": "The complete RMON counters (traffic counters) for a specific link.",
        "type": "object",
        "properties": {
          "counters": {
            "description": "The RMON counter data.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RMonCountersAll"
              }
            ]
          },
          "link_id": {
            "description": "The link ID.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkId"
              }
            ]
          },
          "port_id": {
            "description": "The switch port ID.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortId"
              }
            ]
          }
        },
        "required": [
          "counters",
          "link_id",
          "port_id"
        ]
      },
      "LinkSettings": {
        "description": "An object with link settings used in concert with [`PortSettings`].",
        "type": "object",
        "properties": {
          "addrs": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "ip"
            },
            "uniqueItems": true
          },
          "params": {
            "$ref": "#/components/schemas/LinkCreate"
          }
        },
        "required": [
          "addrs",
          "params"
        ]
      },
      "LinkState": {
        "description": "The state of a data link with a peer.",
        "oneOf": [
          {
            "description": "An error was encountered while trying to configure the link in the switch hardware.",
            "type": "object",
            "properties": {
              "config_error": {
                "type": "string"
              }
            },
            "required": [
              "config_error"
            ],
            "additionalProperties": false
          },
          {
            "description": "The link is up.",
            "type": "string",
            "enum": [
              "up"
            ]
          },
          {
            "description": "The link is down.",
            "type": "string",
            "enum": [
              "down"
            ]
          },
          {
            "description": "The Link is offline due to a fault",
            "type": "object",
            "properties": {
              "faulted": {
                "$ref": "#/components/schemas/Fault"
              }
            },
            "required": [
              "faulted"
            ],
            "additionalProperties": false
          },
          {
            "description": "The link's state is not known.",
            "type": "string",
            "enum": [
              "unknown"
            ]
          }
        ]
      },
      "LinkUpCounter": {
        "description": "Reports how many times a link has transitioned from Down to Up.",
        "type": "object",
        "properties": {
          "current": {
            "description": "LinkUp transitions since the link was last enabled",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "link_path": {
            "description": "Link being reported",
            "type": "string"
          },
          "total": {
            "description": "LinkUp transitions since the link was created",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          }
        },
        "required": [
          "current",
          "link_path",
          "total"
        ]
      },
      "LpPages": {
        "description": "Set of AN pages sent by our link partner",
        "type": "object",
        "properties": {
          "base_page": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "next_page1": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "next_page2": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          }
        },
        "required": [
          "base_page",
          "next_page1",
          "next_page2"
        ]
      },
      "LtStatus": {
        "description": "Link-training status for a single lane",
        "type": "object",
        "properties": {
          "frame_lock": {
            "description": "Frame lock state",
            "type": "boolean"
          },
          "readout_state": {
            "description": "Readout for frame lock state",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "readout_training_state": {
            "description": "Training state readout",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "readout_txstate": {
            "description": "State machine readout for training arbiter",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "rx_trained": {
            "description": "Local training finished",
            "type": "boolean"
          },
          "sig_det": {
            "description": "Signal detect for PCS",
            "type": "boolean"
          },
          "training_failure": {
            "description": "Link training failed",
            "type": "boolean"
          },
          "tx_training_data_en": {
            "description": "TX control to send training pattern",
            "type": "boolean"
          }
        },
        "required": [
          "frame_lock",
          "readout_state",
          "readout_training_state",
          "readout_txstate",
          "rx_trained",
          "sig_det",
          "training_failure",
          "tx_training_data_en"
        ]
      },
      "MacAddr": {
        "description": "An EUI-48 MAC address, used for layer-2 addressing.",
        "type": "object",
        "properties": {
          "a": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0
            },
            "minItems": 6,
            "maxItems": 6
          }
        },
        "required": [
          "a"
        ]
      },
      "ManagementMode": {
        "description": "How a switch port is managed.\n\nThe free-side devices in QSFP ports are complex devices, whose operation usually involves coordinated steps through one or more state machines. For example, when bringing up an optical link, a signal from the peer link must be detected; then a signal recovered; equalizer gains set; etc. In `Automatic` mode, all these kinds of steps are managed autonomously by switch driver software. In `Manual` mode, none of these will occur -- a switch port will only change in response to explicit requests from the operator or Oxide control plane.",
        "oneOf": [
          {
            "description": "A port is managed manually, by either the Oxide control plane or an operator.",
            "type": "string",
            "enum": [
              "manual"
            ]
          },
          {
            "description": "A port is managed automatically by the switch software.",
            "type": "string",
            "enum": [
              "automatic"
            ]
          }
        ]
      },
      "MediaInterfaceId": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Media interface ID for multi-mode fiber media.\n\nSee SFF-8024 Table 4-6.",
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "mmf"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Media interface ID for single-mode fiber.\n\nSee SFF-8024 Table 4-7.",
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "smf"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Media interface ID for passive copper cables.\n\nSee SFF-8024 Table 4-8.",
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "passive_copper"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Media interface ID for active cable assemblies.\n\nSee SFF-8024 Table 4-9.",
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "active_cable"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Media interface ID for BASE-T.\n\nSee SFF-8024 Table 4-10.",
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "base_t"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ]
          }
        ]
      },
      "Monitors": {
        "description": "Free-side device monitoring information.\n\nNote that all values are optional, as some specifications do not require that modules implement monitoring of those values.",
        "type": "object",
        "properties": {
          "aux_monitors": {
            "nullable": true,
            "description": "Auxiliary monitoring values.\n\nThese are only available on CMIS-compatible transceivers, e.g., QSFP-DD.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuxMonitors"
              }
            ]
          },
          "receiver_power": {
            "nullable": true,
            "description": "The measured input optical power (milliwatts);\n\nNote that due to a limitation in the SFF-8636 specification, it's possible for receiver power to be zero. See [`ReceiverPower`] for details.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReceiverPower"
            }
          },
          "supply_voltage": {
            "nullable": true,
            "description": "The measured input supply voltage (Volts).",
            "type": "number",
            "format": "float"
          },
          "temperature": {
            "nullable": true,
            "description": "The measured cage temperature (degrees C);",
            "type": "number",
            "format": "float"
          },
          "transmitter_bias_current": {
            "nullable": true,
            "description": "The output laser bias current (milliamps).",
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "transmitter_power": {
            "nullable": true,
            "description": "The measured output optical power (milliwatts).",
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            }
          }
        }
      },
      "NatTarget": {
        "description": "represents an internal NAT target",
        "type": "object",
        "properties": {
          "inner_mac": {
            "$ref": "#/components/schemas/MacAddr"
          },
          "internal_ip": {
            "type": "string",
            "format": "ipv6"
          },
          "vni": {
            "$ref": "#/components/schemas/Vni"
          }
        },
        "required": [
          "inner_mac",
          "internal_ip",
          "vni"
        ]
      },
      "Oui": {
        "description": "An Organization Unique Identifier.",
        "type": "array",
        "items": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0
        },
        "minItems": 3,
        "maxItems": 3
      },
      "OutputStatus": {
        "type": "string",
        "enum": [
          "valid",
          "invalid"
        ]
      },
      "PcsCounters": {
        "description": "Per-port PCS counters",
        "type": "object",
        "properties": {
          "bad_sync_headers": {
            "description": "Count of bad sync headers",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "bip_errors_per_pcs_lane": {
            "description": "Bit Inteleaved Parity errors (per lane)",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          "block_lock_loss": {
            "description": "Count of block-lock loss detections",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "errored_blocks": {
            "description": "Count of errored blocks",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "hi_ber": {
            "description": "Count of high bit error rate events",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "invalid_errors": {
            "description": "Count of invalid error events",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "port": {
            "description": "Port being tracked",
            "type": "string"
          },
          "sync_loss": {
            "description": "Count of sync loss detections",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "unknown_errors": {
            "description": "Count of unknown error events",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "valid_errors": {
            "description": "Count of valid error events",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          }
        },
        "required": [
          "bad_sync_headers",
          "bip_errors_per_pcs_lane",
          "block_lock_loss",
          "errored_blocks",
          "hi_ber",
          "invalid_errors",
          "port",
          "sync_loss",
          "unknown_errors",
          "valid_errors"
        ]
      },
      "Polarity": {
        "type": "string",
        "enum": [
          "Normal",
          "Inverted"
        ]
      },
      "PortFec": {
        "type": "string",
        "enum": [
          "None",
          "Firecode",
          "RS"
        ]
      },
      "PortId": {
        "example": "qsfp0",
        "title": "PortId",
        "description": "Physical switch port identifier",
        "oneOf": [
          {
            "title": "internal",
            "type": "string",
            "pattern": "(^[iI][nN][tT]0$)"
          },
          {
            "title": "rear",
            "type": "string",
            "pattern": "(^[rR][eE][aA][rR](([0-9])|([1-2][0-9])|(3[0-1]))$)"
          },
          {
            "title": "qsfp",
            "type": "string",
            "pattern": "(^[qQ][sS][fF][pP](([0-9])|([1-2][0-9])|(3[0-1]))$)"
          }
        ]
      },
      "PortMedia": {
        "type": "string",
        "enum": [
          "Copper",
          "Optical",
          "CPU",
          "None",
          "Unknown"
        ]
      },
      "PortPrbsMode": {
        "description": "Legal PRBS modes",
        "type": "string",
        "enum": [
          "Mode31",
          "Mode23",
          "Mode15",
          "Mode13",
          "Mode11",
          "Mode9",
          "Mode7",
          "Mission"
        ]
      },
      "PortSettings": {
        "description": "A port settings transaction object. When posted to the `/port-settings/{port_id}` API endpoint, these settings will be applied holistically, and to the extent possible atomically to a given port.",
        "type": "object",
        "properties": {
          "links": {
            "description": "The link settings to apply to the port on a per-link basis. Any links not in this map that are resident on the switch port will be removed. Any links that are in this map that are not resident on the switch port will be added. Any links that are resident on the switch port and in this map, and are different, will be modified. Links are indexed by spatial index within the port.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/LinkSettings"
            }
          }
        },
        "required": [
          "links"
        ]
      },
      "PortSpeed": {
        "description": "Speeds with which a single port may be configured",
        "type": "string",
        "enum": [
          "Speed0G",
          "Speed1G",
          "Speed10G",
          "Speed25G",
          "Speed40G",
          "Speed50G",
          "Speed100G",
          "Speed200G",
          "Speed400G"
        ]
      },
      "PowerMode": {
        "description": "The power mode of a module.",
        "type": "object",
        "properties": {
          "software_override": {
            "nullable": true,
            "description": "Whether the module is configured for software override of power control.\n\nIf the module is in `PowerState::Off`, this can't be determined, and `None` is returned.",
            "type": "boolean"
          },
          "state": {
            "description": "The actual power state.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PowerState"
              }
            ]
          }
        },
        "required": [
          "state"
        ]
      },
      "PowerState": {
        "description": "An allowed power state for the module.",
        "oneOf": [
          {
            "description": "A module is entirely powered off, using the EFuse.",
            "type": "string",
            "enum": [
              "off"
            ]
          },
          {
            "description": "Power is enabled to the module, but module remains in low-power mode.\n\nIn this state, modules will not establish a link or transmit traffic, but they may be managed and queried for information through their memory maps.",
            "type": "string",
            "enum": [
              "low"
            ]
          },
          {
            "description": "The module is in high-power mode.\n\nNote that additional configuration may be required to correctly configure the module, such as described in SFF-8636 rev 2.10a table 6-10, and that the _host side_ is responsible for ensuring that the relevant configuration is applied.",
            "type": "string",
            "enum": [
              "high"
            ]
          }
        ]
      },
      "RMonCounters": {
        "description": "High level subset of the RMon counters maintained by the Tofino ASIC",
        "type": "object",
        "properties": {
          "crc_error_stomped": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "fragments_rx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frame_too_long": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_dropped_buffer_full": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_all": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_ok": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_all": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_ok": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_with_error": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_with_any_error": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "octets_rx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "octets_rx_in_good_frames": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "octets_tx_total": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "octets_tx_without_error": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "port": {
            "type": "string"
          }
        },
        "required": [
          "crc_error_stomped",
          "fragments_rx",
          "frame_too_long",
          "frames_dropped_buffer_full",
          "frames_rx_all",
          "frames_rx_ok",
          "frames_tx_all",
          "frames_tx_ok",
          "frames_tx_with_error",
          "frames_with_any_error",
          "octets_rx",
          "octets_rx_in_good_frames",
          "octets_tx_total",
          "octets_tx_without_error",
          "port"
        ]
      },
      "RMonCountersAll": {
        "description": "All of the RMon counters maintained by the Tofino ASIC",
        "type": "object",
        "properties": {
          "crc_error_stomped": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "fragments_rx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frame_too_long": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_dropped_buffer_full": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_all": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_indersized": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_length_1024_1518": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_length_128_255": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_length_1519_2047": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_length_2048_4095": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_length_256_511": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_length_4096_8191": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_length_512_1023": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_length_65_127": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_length_8192_9215": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_length_9216": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_length_eq_64": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_length_lt_64": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_oftype_pause": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_ok": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_oversized": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_with_any_error": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_with_broadcast_addresses": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_with_fcs_error": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_with_length_error": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_with_multicast_addresses": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_rx_with_unicast_addresses": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_truncated": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_all": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_broadcast": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_length_1024_1518": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_length_128_255": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_length_1519_2047": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_length_2048_4095": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_length_256_511": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_length_4096_8191": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_length_512_1023": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_length_65_127": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_length_8192_9215": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_length_9216": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_length_eq_64": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_length_lt_64": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_multicast": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_ok": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_pause": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_pri_pause": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_unicast": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_vlan": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "frames_tx_with_error": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "jabber_rx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "octets_rx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "octets_rx_in_good_frames": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "octets_tx_total": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "octets_tx_without_error": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "port": {
            "type": "string"
          },
          "pri0_frames_rx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "pri0_framex_tx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "pri1_frames_rx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "pri1_frames_tx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "pri2_frames_rx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "pri2_frames_tx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "pri3_frames_rx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "pri3_frames_tx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "pri4_frames_rx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "pri4_frames_tx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "pri5_frames_rx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "pri5_frames_tx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "pri6_frames_rx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "pri6_frames_tx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "pri7_frames_rx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "pri7_frames_tx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "priority_pause_frames": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "rx_pri0_pause_1us_count": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "rx_pri1_pause_1us_count": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "rx_pri2_pause_1us_count": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "rx_pri3_pause_1us_count": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "rx_pri4_pause_1us_count": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "rx_pri5_pause_1us_count": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "rx_pri6_pause_1us_count": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "rx_pri7_pause_1us_count": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "rx_standard_pause_1us_count": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "rx_vlan_frames_good": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "tx_pri0_pause_1us_count": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "tx_pri1_pause_1us_count": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "tx_pri2_pause_1us_count": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "tx_pri3_pause_1us_count": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "tx_pri4_pause_1us_count": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "tx_pri5_pause_1us_count": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "tx_pri6_pause_1us_count": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "tx_pri7_pause_1us_count": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          }
        },
        "required": [
          "crc_error_stomped",
          "fragments_rx",
          "frame_too_long",
          "frames_dropped_buffer_full",
          "frames_rx_all",
          "frames_rx_indersized",
          "frames_rx_length_1024_1518",
          "frames_rx_length_128_255",
          "frames_rx_length_1519_2047",
          "frames_rx_length_2048_4095",
          "frames_rx_length_256_511",
          "frames_rx_length_4096_8191",
          "frames_rx_length_512_1023",
          "frames_rx_length_65_127",
          "frames_rx_length_8192_9215",
          "frames_rx_length_9216",
          "frames_rx_length_eq_64",
          "frames_rx_length_lt_64",
          "frames_rx_oftype_pause",
          "frames_rx_ok",
          "frames_rx_oversized",
          "frames_rx_with_any_error",
          "frames_rx_with_broadcast_addresses",
          "frames_rx_with_fcs_error",
          "frames_rx_with_length_error",
          "frames_rx_with_multicast_addresses",
          "frames_rx_with_unicast_addresses",
          "frames_truncated",
          "frames_tx_all",
          "frames_tx_broadcast",
          "frames_tx_length_1024_1518",
          "frames_tx_length_128_255",
          "frames_tx_length_1519_2047",
          "frames_tx_length_2048_4095",
          "frames_tx_length_256_511",
          "frames_tx_length_4096_8191",
          "frames_tx_length_512_1023",
          "frames_tx_length_65_127",
          "frames_tx_length_8192_9215",
          "frames_tx_length_9216",
          "frames_tx_length_eq_64",
          "frames_tx_length_lt_64",
          "frames_tx_multicast",
          "frames_tx_ok",
          "frames_tx_pause",
          "frames_tx_pri_pause",
          "frames_tx_unicast",
          "frames_tx_vlan",
          "frames_tx_with_error",
          "jabber_rx",
          "octets_rx",
          "octets_rx_in_good_frames",
          "octets_tx_total",
          "octets_tx_without_error",
          "port",
          "pri0_frames_rx",
          "pri0_framex_tx",
          "pri1_frames_rx",
          "pri1_frames_tx",
          "pri2_frames_rx",
          "pri2_frames_tx",
          "pri3_frames_rx",
          "pri3_frames_tx",
          "pri4_frames_rx",
          "pri4_frames_tx",
          "pri5_frames_rx",
          "pri5_frames_tx",
          "pri6_frames_rx",
          "pri6_frames_tx",
          "pri7_frames_rx",
          "pri7_frames_tx",
          "priority_pause_frames",
          "rx_pri0_pause_1us_count",
          "rx_pri1_pause_1us_count",
          "rx_pri2_pause_1us_count",
          "rx_pri3_pause_1us_count",
          "rx_pri4_pause_1us_count",
          "rx_pri5_pause_1us_count",
          "rx_pri6_pause_1us_count",
          "rx_pri7_pause_1us_count",
          "rx_standard_pause_1us_count",
          "rx_vlan_frames_good",
          "tx_pri0_pause_1us_count",
          "tx_pri1_pause_1us_count",
          "tx_pri2_pause_1us_count",
          "tx_pri3_pause_1us_count",
          "tx_pri4_pause_1us_count",
          "tx_pri5_pause_1us_count",
          "tx_pri6_pause_1us_count",
          "tx_pri7_pause_1us_count"
        ]
      },
      "ReceiverPower": {
        "description": "Measured receiver optical power.\n\nThe SFF specifications allow for devices to monitor input optical power in several ways. It may either be an average power, over some unspecified time, or a peak-to-peak power. The latter is often abbreviated OMA, for Optical Modulation Amplitude. Again the time interval for peak-to-peak measurments are not specified.\n\nDetails -------\n\nThe SFF-8636 specification has an unfortunate limitation. There is no separate advertisement for whether a module supports measurements of receiver power. Instead, the _kind_ of measurement is advertised. The _same bit value_ could mean that either a peak-to-peak measurement is supported, or the measurements are not supported at all. Thus values of `PeakToPeak(0.0)` may mean that power measurements are not supported.",
        "oneOf": [
          {
            "description": "The measurement is represents average optical power, in mW.",
            "type": "object",
            "properties": {
              "average": {
                "type": "number",
                "format": "float"
              }
            },
            "required": [
              "average"
            ],
            "additionalProperties": false
          },
          {
            "description": "The measurement represents a peak-to-peak, in mW.",
            "type": "object",
            "properties": {
              "peak_to_peak": {
                "type": "number",
                "format": "float"
              }
            },
            "required": [
              "peak_to_peak"
            ],
            "additionalProperties": false
          }
        ]
      },
      "Route": {
        "description": "Represents all mappings of a subnet to a its nexthop target(s).",
        "type": "object",
        "properties": {
          "cidr": {
            "description": "Traffic destined for any address within the CIDR block is routed using this information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpNet"
              }
            ]
          },
          "targets": {
            "description": "All RouteTargets associated with this CIDR",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouteTarget"
            }
          }
        },
        "required": [
          "cidr",
          "targets"
        ]
      },
      "RouteAdd": {
        "description": "Represents a single mapping of a subnet to a single RouteTarget nexthop target.",
        "type": "object",
        "properties": {
          "cidr": {
            "description": "Traffic destined for any address within the CIDR block is routed using this information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpNet"
              }
            ]
          },
          "target": {
            "description": "A single RouteTarget associated with this CIDR",
            "allOf": [
              {
                "$ref": "#/components/schemas/RouteTarget"
              }
            ]
          }
        },
        "required": [
          "cidr",
          "target"
        ]
      },
      "RouteResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Route"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "RouteSet": {
        "description": "Represents a new or replacement mapping of a subnet to a single RouteTarget nexthop target.",
        "type": "object",
        "properties": {
          "cidr": {
            "description": "Traffic destined for any address within the CIDR block is routed using this information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpNet"
              }
            ]
          },
          "replace": {
            "description": "Should this route replace any existing route?  If a route exists and this parameter is false, then the call will fail.",
            "type": "boolean"
          },
          "target": {
            "description": "A single RouteTarget associated with this CIDR",
            "allOf": [
              {
                "$ref": "#/components/schemas/RouteTarget"
              }
            ]
          }
        },
        "required": [
          "cidr",
          "replace",
          "target"
        ]
      },
      "RouteTarget": {
        "description": "Represents a specific egress port and nexthop target.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "V4": {
                "$ref": "#/components/schemas/Ipv4Route"
              }
            },
            "required": [
              "V4"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "V6": {
                "$ref": "#/components/schemas/Ipv6Route"
              }
            },
            "required": [
              "V6"
            ],
            "additionalProperties": false
          }
        ]
      },
      "RxSigInfo": {
        "description": "Per-lane Rx signal information",
        "type": "object",
        "properties": {
          "phy_ready": {
            "description": "CDR lock achieved",
            "type": "boolean"
          },
          "ppm": {
            "description": "Apparent PPM difference between local and remote",
            "type": "integer",
            "format": "int32"
          },
          "sig_detect": {
            "description": "Rx signal detected",
            "type": "boolean"
          }
        },
        "required": [
          "phy_ready",
          "ppm",
          "sig_detect"
        ]
      },
      "SerdesEye": {
        "description": "Eye height(s) for a single lane in mv",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "Nrz": {
                "type": "number",
                "format": "float"
              }
            },
            "required": [
              "Nrz"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "Pam4": {
                "type": "object",
                "properties": {
                  "eye1": {
                    "type": "number",
                    "format": "float"
                  },
                  "eye2": {
                    "type": "number",
                    "format": "float"
                  },
                  "eye3": {
                    "type": "number",
                    "format": "float"
                  }
                },
                "required": [
                  "eye1",
                  "eye2",
                  "eye3"
                ]
              }
            },
            "required": [
              "Pam4"
            ],
            "additionalProperties": false
          }
        ]
      },
      "Sff8636Datapath": {
        "description": "The datapath of an SFF-8636 module.\n\nThis describes the state of a single lane in an SFF module. It includes information about input and output signals, faults, and controls.",
        "type": "object",
        "properties": {
          "rx_cdr_enabled": {
            "description": "Media-side transmit Clock and Data Recovery (CDR) enable status.\n\nCDR is the process by which the module enages an internal retimer function, through which the module attempts to recovery a clock signal directly from the input bitstream.",
            "type": "boolean"
          },
          "rx_lol": {
            "description": "Media-side loss of lock flag.\n\nThis is true if the module is not able to extract a clock signal from the media-side signal (usually optical).",
            "type": "boolean"
          },
          "rx_los": {
            "description": "Media-side loss of signal flag.\n\nThis is true if there is no detected input signal from the media-side (usually optical).",
            "type": "boolean"
          },
          "tx_adaptive_eq_fault": {
            "description": "Flag indicating a fault in adaptive transmit equalization.",
            "type": "boolean"
          },
          "tx_cdr_enabled": {
            "description": "Host-side transmit Clock and Data Recovery (CDR) enable status.\n\nCDR is the process by which the module enages an internal retimer function, through which the module attempts to recovery a clock signal directly from the input bitstream.",
            "type": "boolean"
          },
          "tx_enabled": {
            "description": "Software control of output transmitter.",
            "type": "boolean"
          },
          "tx_fault": {
            "description": "Flag indicating a fault in the transmitter and/or laser.",
            "type": "boolean"
          },
          "tx_lol": {
            "description": "Host-side loss of lock flag.\n\nThis is true if the module is not able to extract a clock signal from the host-side electrical signal.",
            "type": "boolean"
          },
          "tx_los": {
            "description": "Host-side loss of signal flag.\n\nThis is true if there is no detected electrical signal from the host-side serdes.",
            "type": "boolean"
          }
        },
        "required": [
          "rx_cdr_enabled",
          "rx_lol",
          "rx_los",
          "tx_adaptive_eq_fault",
          "tx_cdr_enabled",
          "tx_enabled",
          "tx_fault",
          "tx_lol",
          "tx_los"
        ]
      },
      "SffComplianceCode": {
        "description": "The compliance code for an SFF-8636 module.\n\nThese values record a specification compliance code, from SFF-8636 Table 6-17, or an extended specification compliance code, from SFF-8024 Table 4-4.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "code": {
                "description": "Extended electrical or optical interface codes",
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "extended"
                ]
              }
            },
            "required": [
              "code",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "description": "The Ethernet specification implemented by a module.",
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ethernet"
                ]
              }
            },
            "required": [
              "code",
              "type"
            ]
          }
        ]
      },
      "SidecarCableLeg": {
        "description": "The leg of the Sidecar-internal cable.\n\nThis describes the leg on the cabling that connects the pins on the Tofino ASIC to the Sidecar chassis connector.",
        "type": "string",
        "enum": [
          "A",
          "C"
        ]
      },
      "SidecarConnector": {
        "description": "The Sidecar chassis connector mating the backplane and internal cabling.\n\nThis describes the \"group\" of backplane links that all terminate in one connector on the Sidecar itself. This is the connection point between a cable on the backplane itself and the Sidecar chassis.",
        "type": "integer",
        "format": "uint8",
        "minimum": 0
      },
      "SwitchIdentifiers": {
        "description": "Identifiers for a switch.",
        "type": "object",
        "properties": {
          "asic_backend": {
            "description": "Asic backend (compiler target) responsible for these identifiers.",
            "type": "string"
          },
          "fab": {
            "nullable": true,
            "description": "Fabrication plant identifier.",
            "type": "string",
            "minLength": 1,
            "maxLength": 1
          },
          "lot": {
            "nullable": true,
            "description": "Lot identifier.",
            "type": "string",
            "minLength": 1,
            "maxLength": 1
          },
          "model": {
            "description": "The model number of the switch being managed.",
            "type": "string"
          },
          "revision": {
            "description": "The revision number of the switch being managed.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "serial": {
            "description": "The serial number of the switch being managed.",
            "type": "string"
          },
          "sidecar_id": {
            "description": "Unique identifier for the chip.",
            "type": "string",
            "format": "uuid"
          },
          "slot": {
            "description": "The slot number of the switch being managed.\n\nMGS uses u16 for this internally.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "wafer": {
            "nullable": true,
            "description": "Wafer number within the lot.",
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "wafer_loc": {
            "nullable": true,
            "description": "The wafer location as (x, y) coordinates on the wafer, represented as an array due to the lack of tuple support in OpenAPI.",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int16"
            },
            "minItems": 2,
            "maxItems": 2
          }
        },
        "required": [
          "asic_backend",
          "model",
          "revision",
          "serial",
          "sidecar_id",
          "slot"
        ]
      },
      "SwitchPort": {
        "description": "A physical port on the Sidecar switch.",
        "type": "object",
        "properties": {
          "management_mode": {
            "description": "How the QSFP device is managed.\n\nSee `ManagementMode` for details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ManagementMode"
              }
            ]
          },
          "port_id": {
            "description": "The identifier for the switch port.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortId"
              }
            ]
          },
          "transceiver": {
            "nullable": true,
            "description": "Details about a transceiver module inserted into the switch port.\n\nIf there is no transceiver at all, this will be `None`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Transceiver"
              }
            ]
          }
        },
        "required": [
          "port_id"
        ]
      },
      "Table": {
        "description": "Represents the contents of a P4 table",
        "type": "object",
        "properties": {
          "entries": {
            "description": "There will be an entry for each populated slot in the table",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TableEntry"
            }
          },
          "name": {
            "description": "A user-friendly name for the table",
            "type": "string"
          },
          "size": {
            "description": "The maximum number of entries the table can hold",
            "type": "integer",
            "format": "uint",
            "minimum": 0
          }
        },
        "required": [
          "entries",
          "name",
          "size"
        ]
      },
      "TableCounterEntry": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Counter values",
            "allOf": [
              {
                "$ref": "#/components/schemas/CounterData"
              }
            ]
          },
          "keys": {
            "description": "Names and values of each of the key fields.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "data",
          "keys"
        ]
      },
      "TableEntry": {
        "description": "Each entry in a P4 table is addressed by matching against a set of key values.  If an entry is found, an action is taken with an action-specific set of arguments.\n\nNote: each entry will have the same key fields and each instance of any given action will have the same argument names, so a vector of TableEntry structs will contain a signficant amount of redundant data.  We could consider tightening this up by including a schema of sorts in the \"struct Table\".",
        "type": "object",
        "properties": {
          "action": {
            "description": "Name of the action to take on a match",
            "type": "string"
          },
          "action_args": {
            "description": "Names and values for the arguments to the action implementation.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "keys": {
            "description": "Names and values of each of the key fields.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "action",
          "action_args",
          "keys"
        ]
      },
      "TfportData": {
        "description": "The per-link data consumed by tfportd",
        "type": "object",
        "properties": {
          "asic_id": {
            "description": "The lower-level ASIC ID used to refer to this object in the switch driver software.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "ipv6_enabled": {
            "description": "Is ipv6 enabled for this link",
            "type": "boolean"
          },
          "link_id": {
            "description": "The link ID for this link.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkId"
              }
            ]
          },
          "link_local": {
            "nullable": true,
            "description": "The IPv6 link-local address of the link, if it exists.",
            "type": "string",
            "format": "ipv6"
          },
          "mac": {
            "description": "The MAC address for the link.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MacAddr"
              }
            ]
          },
          "port_id": {
            "description": "The switch port ID for this link.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortId"
              }
            ]
          }
        },
        "required": [
          "asic_id",
          "ipv6_enabled",
          "link_id",
          "mac",
          "port_id"
        ]
      },
      "Transceiver": {
        "description": "The state of a transceiver in a QSFP switch port.",
        "oneOf": [
          {
            "description": "The transceiver could not be managed due to a power fault.",
            "type": "object",
            "properties": {
              "info": {
                "$ref": "#/components/schemas/FaultReason"
              },
              "state": {
                "type": "string",
                "enum": [
                  "faulted"
                ]
              }
            },
            "required": [
              "info",
              "state"
            ]
          },
          {
            "description": "A transceiver was present, but unsupported and automatically disabled.",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "unsupported"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "A transceiver is present and supported.",
            "type": "object",
            "properties": {
              "info": {
                "$ref": "#/components/schemas/TransceiverInfo"
              },
              "state": {
                "type": "string",
                "enum": [
                  "supported"
                ]
              }
            },
            "required": [
              "info",
              "state"
            ]
          }
        ]
      },
      "TransceiverInfo": {
        "description": "Information about a QSFP transceiver.\n\nThis stores the most relevant information about a transceiver module, such as vendor info or power. Each field may be missing, indicating it could not be determined.",
        "type": "object",
        "properties": {
          "electrical_mode": {
            "description": "The electrical mode of the transceiver.\n\nSee [`ElectricalMode`] for details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ElectricalMode"
              }
            ]
          },
          "in_reset": {
            "nullable": true,
            "description": "True if the module is currently in reset.",
            "type": "boolean"
          },
          "interrupt_pending": {
            "nullable": true,
            "description": "True if there is a pending interrupt on the module.",
            "type": "boolean"
          },
          "power_mode": {
            "nullable": true,
            "description": "The power mode of the transceiver.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PowerMode"
              }
            ]
          },
          "vendor_info": {
            "nullable": true,
            "description": "Vendor and part identifying information.\n\nThe information will not be populated if it could not be read.",
            "allOf": [
              {
                "$ref": "#/components/schemas/VendorInfo"
              }
            ]
          }
        },
        "required": [
          "electrical_mode"
        ]
      },
      "TxEq": {
        "description": "Parameters to adjust the transceiver equalization settings for a link on a switch.  These parameters match those available on a tofino-based sidecar, and may need to be adapted when we move to a new switch ASIC.",
        "type": "object",
        "properties": {
          "main": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "post1": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "post2": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "pre1": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "pre2": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TxEqSwHw": {
        "description": "This represents the software-determined equalization value initially assigned to the transceiver and the value actually being used by the hardware.  The values may differ on transceivers that are capable of tuning their own settings at run time.",
        "type": "object",
        "properties": {
          "hw": {
            "$ref": "#/components/schemas/TxEq"
          },
          "sw": {
            "$ref": "#/components/schemas/TxEq"
          }
        },
        "required": [
          "hw",
          "sw"
        ]
      },
      "Vendor": {
        "description": "Vendor-specific information about a transceiver module.",
        "type": "object",
        "properties": {
          "date": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "oui": {
            "$ref": "#/components/schemas/Oui"
          },
          "part": {
            "type": "string"
          },
          "revision": {
            "type": "string"
          },
          "serial": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "oui",
          "part",
          "revision",
          "serial"
        ]
      },
      "VendorInfo": {
        "description": "The vendor information for a transceiver module.",
        "type": "object",
        "properties": {
          "identifier": {
            "description": "The SFF-8024 identifier.",
            "type": "string"
          },
          "vendor": {
            "description": "The vendor information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Vendor"
              }
            ]
          }
        },
        "required": [
          "identifier",
          "vendor"
        ]
      },
      "Vni": {
        "description": "A Geneve Virtual Network Identifier.\n\nA Geneve VNI is a 24-bit value used to identify virtual networks encapsulated using the Generic Network Virtualization Encapsulation (Geneve) protocol (RFC 8926).",
        "type": "integer",
        "format": "uint32",
        "minimum": 0
      },
      "ipv4ResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "type": "string",
              "format": "ipv4"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "ipv6ResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "type": "string",
              "format": "ipv6"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      }
    },
    "responses": {
      "Error": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}
